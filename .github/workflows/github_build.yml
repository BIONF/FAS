# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on:
  push:
    branches: [ master ]
    tags:
    - '*'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest wheel
        sudo apt-get -y install hmmer
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test
      run: |
        pwd
        echo "*** INSTALL FAS..."
        pip install .
        echo "*** DOWNLOAD DEPENDENCIES AND SETUP FAS..."
        wget https://github.com/BIONF/data4travis/raw/main/dtu/signalp-4.1g.Linux.tar.gz &> /dev/null
        wget https://github.com/BIONF/data4travis/raw/main/dtu/tmhmm-2.0c.Linux.tar.gz &> /dev/null
        fas.setup -t /home/runner/work/FAS/FAS -d /home/runner/work/FAS/FAS
        less annoTools.txt | grep -v "COILS2" > annoTools.txt.mod
        mv annoTools.txt.mod annoTools.txt
        echo "*** TEST FAS.DOANNO..."
        fas.doAnno -i test_annofas.fa -o anno_output
        echo "*** TEST FAS.RUN..."
        fas.run -s greedyFAS/annoFAS/test_annofas.fa -q greedyFAS/annoFAS/test_annofas.fa -a anno_output -o fas_output
        echo "*** TEST FAS.DOANNO REDO..."
        fas.doAnno -i test_annofas.fa -o anno_output --redo pfam
        echo "*** TEST FAS.CHECKANNO..."
        fas.checkAnno -s greedyFAS/annoFAS/test_annofas.fa -a anno_output/test_annofas.json -o tmp
        echo "*** TEST FAS.GETPROTBYANNO..."
        fas.getProtByAnno -a anno_output/test_annofas.json -f G-alpha
        echo "*** TEST FAS.CALCCOMPLEXITY..."
        fas.calcComplexity -i anno_output/test_annofas.json
        echo "*** TEST FAS.GETDOMAINS..."
        fas.getDomains -j anno_output/test_annofas.json -p A0A1S4GN31 -o A0A1S4GN31.domains
        echo "*** TEST FAS.SPLITANNO..."
        echo "A0A1W5C929" > id.txt
        fas.splitAnno -x id.txt -i anno_output/test_annofas.json -o anno_output/out.json
        echo "*** TEST FAS.RUNMULTITAXA..."
        cp anno_output/test_annofas.json anno_output/spec_a.json
        cp anno_output/test_annofas.json anno_output/spec_b.json
        echo -e "A0A1U7F4Y7\tspec_a\tA0A1S4GN82\tspec_b\nA0A1U7F5Z4\tspec_a\tA0A1S4GN82\tspec_b" > test_multi.txt
        fas.runMultiTaxa --input test_multi.txt -a anno_output -o fas_output
        ls fas_output
        echo "*** TEST FAS.MERGEJSON..."
        fas.mergeJson -i fas_output -n merged_json -o fas_output
        echo "*** TEST FAS.MERGEANNO..."
        fas.mergeAnno -i anno_output/ -n merged_anno -o anno_output
        echo "*** TEST FAS.UPDATEANNO..."
        fas.updateAnno --new anno_output/spec_a.json --old anno_output/test_annofas.json
        echo "*** TEST FAS.RUNFDOGFAS..."
        wget https://github.com/BIONF/data4travis/raw/main/fas_test.tar.gz &> /dev/null
        tar -xf fas_test.tar.gz
        fas.runFdogFas -i test.extended.fa -w annotation_dir
        ls
    - name: Deploy
      if: startsWith(github.event.ref, 'refs/tags')
      uses: casperdcl/deploy-pypi@v2
      with:
        password: ${{ secrets.pypi }}
        build: true
        upload: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
